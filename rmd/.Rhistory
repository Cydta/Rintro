sapply(as.list(x), fp, parms=parms)
sapply(xini=as.list(x), fp, parms=parms)
sapply(xini, fp, parms=parms)
lapply(xini, fp, parms=parms)
fp(xini, parms=parms)
fp <- function (xini,times,func,parms) { tail(ode(xini, times, func, parms),1)[1,"x"] }
fp(xini, parms=parms)
fp(xini, func=pf, parms=parms)
fp(xini, func=pf, parms=parms, times=times)
ps=parms
ts=times
fp(xini, func=pf, parms=ps, times=ts)
xini
x
as.list(x)
sapply(as.list(x), fp, func=pf, parms=ps, times=ts)
ll=c(x=0.1,x=-0.1)
ll
str(ll)
sapply(ll, fp, func=pf, parms=ps, times=ts)
sapply(as.list(ll), fp, func=pf, parms=ps, times=ts)
lapply(as.list(ll), fp, func=pf, parms=ps, times=ts)
i39 <- sapply(3:9, seq) # list of vectors
sapply(i39, fivenum)
vapply(i39, fivenum,
c(Min. = 0, "1st Qu." = 0, Median = 0, "3rd Qu." = 0, Max. = 0))
i39
fivenum(i39[1])
fivenum(i39[[1]])
fivenum(i39[[3]])
fivenum(i39[[7]])
sapply(i39,fivenum)
?fivenum
times      <- seq(0, 1, by = 0.1)
# return fixed-point
fp <- function (xini,times,func,parms) { tail(ode(xini, times, func, parms),1)[1,"x"] }
for (beta in seq(-5,5,by=0.1)) {
for (xini in seq(-1,1,by=0.1)) {
xfp = fp(xini, times, pf, parms=c(beta=beta))
cat(beta,xini,xfp,"\n")
}
}
xini
for (beta in seq(-5,5,by=0.1)) {
for (xini in seq(-1,1,by=0.1)) {
xfp = fp(c(x=xini), times, pf, parms=c(beta=beta))
cat(beta,xini,xfp,"\n")
}
}
times      <- seq(0, 1000)
# return fixed-point
fp <- function (xini,times,func,parms) { tail(ode(xini, times, func, parms),1)[1,"x"] }
for (beta in seq(-5,5,by=0.1)) {
for (xini in seq(-1,1,by=0.1)) {
xfp = fp(c(x=xini), times, pf, parms=c(beta=beta))
cat(beta,xini,xfp,"\n")
}
}
sqrt(5)
fp(xini, func=pf, parms=ps, times=ts)
fp(0.5, func=pf, parms=ps, times=ts)
fp(x=0.5, func=pf, parms=ps, times=ts)
fp(c(x=0.5), func=pf, parms=ps, times=ts)
xini=c(x=0.5)
ls
xini=c(x=0.5)
xini
list(c(xini,xini))
list(cbind(xini,xini))
list(rbind(xini,xini))
xini=c(x=0.5)
xini
as.list(xini)
list(xini=c(0.1,-0.1))
ll=list(xini=c(0.1,-0.1))
ll
str(lll)
str(ll)
xini
fp(c(0.5), func=pf, parms=ps, times=ts)
fp(c(x=0.5), func=pf, parms=ps, times=ts)
list(x=0.1, x=-0.1)
ll=list(x=0.1, x=-0.1)
fp(ll[[1]], func=pf, parms=ps, times=ts)
ll[1]
str(x=0.1)
str(c(x=0.1))
ode(xini, times, func, parms)
ode(xini, times, pf, parms)
ode(xini, times=1:10, pf, parms)
ode(0.1, times=1:10, pf, parms)
ode(x=0.1, times=1:10, pf, parms)
ode(y=0.1, times=1:10, pf, parms)
ode(y=c(0.1), times=1:10, pf, parms)
ode(y=c(x=0.1), times=1:10, pf, parms)
pitchfork2 <- function(x, beta) {
dx <- beta*x - x^3
return(list( c(dx) ))
}
pitchfork2(1,2)
ode(y=c(x=0.1), times=1:10, pitchfork2, parms)
parms
ode(y=c(x=0.1), times=1:10, pitchfork2, parms=c(beta=1))
ode(y=c(x=0.1), times=1:10, pitchfork2, parms=parms
)
pitchfork2 <- function(t,x, beta) {
dx <- beta*x - x^3
return(list( c(dx) ))
}
pitchfork2(1,2)
pitchfork2(1,1,2)
pitchfork2(2,1,2)
ode(y=c(x=0.1), times=1:10, pitchfork2, parms=parms
)
ode(y=0.1, times=1:10, pitchfork2, parms=parms)
fp(c(x=0.5), func=pitchfork2, parms=ps, times=ts)
fp(c(0.5), func=pitchfork2, parms=ps, times=ts)
fp(c(0.5), func=pitchfork2, parms=ps, times=ts)
ode(0.1, times=1:10, pitchfork2, parms=parms)
tail(ode(0.1, times=1:10, pitchfork2, parms=parms),1)[1,1]
tail(ode(0.1, times=1:10, pitchfork2, parms=parms),1)[1,2]
tail(ode(0.1, times=1:10, pitchfork2, parms=parms),1)[1,"x"]
tail(ode(0.1, times=1:10, pitchfork2, parms=parms),1)[1,2]
tail(ode(0.1, times=1:100, pitchfork2, parms=parms),1)[1,2]
sapply(ll,fp, times=1:100, pitchfork2, parms=parms))
fp <- function (xini,times,func,parms) { tail(ode(xini, times, func, parms),1)[1,2] }
sapply(ll,fp, times=1:100, pitchfork2, parms=parms))
sapply(0.1, fp, times=c(1:100), func=pf, parms=parms)
sapply(0.1, fp, times=c(1:100), func=pitchfork2, parms=parms)
sapply(c(-0.1,0.1), fp, times=c(1:100), func=pitchfork2, parms=parms)
sapply(seq(-1,1,by=0.1), fp, times=c(1:100), func=pitchfork2, parms=parms)
pitchfork2 <- function(t,x, beta) { return( list(beta*x - x^3) ) }
ode(0.1, times=1:10, pitchfork2, parms=parms)
fp(c(0.5), func=pitchfork2, parms=ps, times=ts)
fp(c(-0.5), func=pitchfork2, parms=ps, times=ts)
fp(c(-0.5), func=pitchfork2, parms=ps)
pitchfork2 <- function(t,x, beta) { return( list(beta*x - x^3) ) }
pf <- cmpfun(pitchfork2) # speedup using library(compiler)
fp <- function (xini,times,func,parms) { tail(ode(xini, times, func, parms),1)[1,2] }
sapply(0.1,fp, times=1:1000)
sapply(0.1,fp, func=pf, times=1:1000)
sapply(0.1,fp, func=pf, times=1:1000, parms=c(beta=1))
sapply(seq(-1,1,by=0.1),fp, func=pf, times=1:1000, parms=c(beta=1))
xfps=sapply(xinis, fp, func=pf, times=1:1000, parms=c(beta=b))
xfps=sapply(xinis, fp, func=pf, times=1:1000, parms=c(beta=b))
b=1
xfps=sapply(xinis, fp, func=pf, times=1:1000, parms=c(beta=b))
xfps=sapply(xinis, fp, func=pf, times=1:1000, parms=c(beta=b))
xinis=seq(-1,1,by=0.1)
xfps=sapply(xinis, fp, func=pf, times=1:1000, parms=c(beta=b))
xfps
plot(b,xfps)
plot(rep(b,length(xfps),xfps)
)
length(xfps)
rep(b,length(xfps))
plot(rep(b,length(xfps)), xfps)
plot(rep(b,length(xfps)), xfps)
points(rep(b,length(xfps)), xfps)
points(rep(b,length(xfps)), xfps, col="red")
plot.new()
points(rep(b,length(xfps)), xfps, col="red")
plot(type="n", xlim=c(-6, 6), ylim = c(-5,5))
points(rep(b,length(xfps)), xfps, col="red")
plot(type="n", xlim=c(-6, 6), ylim = c(-5,5))
plot(1,1, type="n", xlim=c(-6, 6), ylim = c(-5,5))
points(rep(b,length(xfps)), xfps, col="red")
plot(1, type="n", xlim=c(-6, 6), ylim = c(-5,5))
points(rep(b,length(xfps)), xfps, col="red")
betas=seq(-5,5,by=0.1)
plot(1,type="n", xlim=c(-6, 6), ylim = c(-5,5))
for (b in betas) {
xinis=seq(-1,1,by=0.1)
# determine fixed point for all initial conditions
xfps=sapply(xinis, fp, func=pf, times=1:1000, parms=c(beta=b))
points(rep(b,length(xfps)), xfps)
}
}
betas=seq(-5,5,by=0.2)
plot(1,type="n", xlim=c(-6, 6), ylim = c(-4,4), xlab="\xb", ylab="asymptotic x", main="Pitchfork Bifurcation")
for (b in betas) {
# determine fixed points for all initial conditions
xinis=seq(-1,1,by=0.1)
xfps=sapply(xinis, fp, func=pf, times=1:1000, parms=c(beta=b))
points(rep(b,length(xfps)), xfps, col="red")
}
}
saddle <- function(t,x, beta) { return( list(beta - x^2) ) }
sdc<- cmpfun(saddle) # speedup using library(compiler)
plot(1,type="n", xlim=c(-6, 6), ylim = c(-4,4), xlab="\xb", ylab="asymptotic x", main="Saddle Bifurcation")
for (b in betas) {
# determine fixed points for all initial conditions
xfps=sapply(xinis, fp, func=sdc, times=times, parms=c(beta=b))
points(rep(b,length(xfps)), xfps, col="red")
}
xinis
ode(0.1, times, func, parms),1)[1,2]
ode(0.1, times=times, func=sdc, parms=parms),1)[1,2]
ode(0.1, times=times, func=sdc, parms=parms)
ode(0.1, times=times, func=sdc, parms=c(beta=0.1))
ode(0.1, times=times, func=sdc, parms=c(beta=0.1))
fp(0.1, times=times, func=sdc, parms=c(beta=0.1))
fp(-0.1, times=times, func=sdc, parms=c(beta=0.1))
fp(1.1, times=times, func=sdc, parms=c(beta=0.1))
fp(1.1, times=times, func=sdc, parms=c(beta=0))
fp(1.1, times=times, func=sdc, parms=c(beta=0))
fp(1.1, times=times, func=sdc, parms=c(beta=2))
fp(1.1, times=times, func=sdc, parms=c(beta=-1))
fp(1.1, times=times, func=sdc, parms=c(beta=-0.5))
fp(1.1, times=times, func=sdc, parms=c(beta=0))
plot(1,type="n", xlim=c(min(betas)-2, max(betas)), ylim = c(-4,4), xlab="\xb", ylab="asymptotic x", main="Saddle Bifurcation")
betas=seq(0,4,by=0.2)
for (b in betas) {
# determine fixed points for all initial conditions
xfps=sapply(xinis, fp, func=sdc, times=times, parms=c(beta=b))
points(rep(b,length(xfps)), xfps, col="red")
}
plot(1,type="n", xlim=c(min(betas)-2, max(betas)), ylim = c(-4,4), xlab="\xb", ylab="asymptotic x", main="Saddle Bifurcation")
betas=seq(0,4,by=0.2)
xinis=seq(-0.5,0.5,by=0.01)
for (b in betas) {
# determine fixed points for all initial conditions
xfps=sapply(xinis, fp, func=sdc, times=times, parms=c(beta=b))
points(rep(b,length(xfps)), xfps, col="red")
}
x
x=0:4
x
x=seq(0,4,by=0.1)
x
lines(x,sqrt(x),col="blue")
lines(x,-sqrt(x),col="blue",lty=2)
plot(1,type="n", xlim=c(min(betas)-2, max(betas)), ylim = c(-4,4), xlab="\xb", ylab="asymptotic x", main="Saddle Bifurcation")
betas=seq(0,4,by=0.2)
xinis=seq(-0.5,0.5,by=0.1)
for (b in betas) {
# determine fixed points for all initial conditions
xfps=sapply(xinis, fp, func=sdc, times=times, parms=c(beta=b))
points(rep(b,length(xfps)), xfps, col="red")
}
x=seq(0,4,by=0.1)
lines(x,sqrt(x),col="blue")
lines(x,-sqrt(x),col="blue",lty=2)
plot(1,type="n", xlim=c(min(betas)-2, max(betas)), ylim = c(-4,4), xlab="\xb", ylab="asymptotic x", main="Saddle Bifurcation")
betas=seq(0,4,by=0.1)
xinis=seq(-0.5,0.5,by=0.1)
for (b in betas) {
# determine fixed points for all initial conditions
xfps=sapply(xinis, fp, func=sdc, times=times, parms=c(beta=b))
points(rep(b,length(xfps)), xfps, col="red")
}
x=seq(0,4,by=0.1)
lines(x,sqrt(x),col="blue")
lines(x,-sqrt(x),col="blue",lty=2)
plot(1,type="n", xlim=c(min(betas)-2, max(betas)), ylim = c(-4,4), xlab="beta", ylab="asymptotic x", main="Saddle Bifurcation")
betas=seq(0,4,by=0.2)
xinis=seq(-0.5,0.5,by=0.1)
for (b in betas) {
# determine fixed points for all initial conditions
xfps=sapply(xinis, fp, func=sdc, times=times, parms=c(beta=b))
points(rep(b,length(xfps)), xfps, col="red")
}
x=seq(0,4,by=0.1)
lines(x,sqrt(x),col="blue")
lines(x,-sqrt(x),col="blue",lty=2)
plot(1,type="n", xlim=c(min(betas)-2, max(betas)), ylim = c(-4,4), xlab="beta", ylab="asymptotic x", main="Saddle Bifurcation")
betas=seq(0,4,by=0.2)
xinis=seq(-0.5,0.5,by=0.1)
for (b in betas) {
# determine fixed points for all initial conditions
xfps=sapply(xinis, fp, func=sdc, times=times, parms=c(beta=b))
points(rep(b,length(xfps)), xfps, col="red")
}
x=seq(0,4,by=0.1)
lines(x,sqrt(x),col="blue")
lines(x,-sqrt(x),col="blue",lty=2)
fp(1.1, times=times, func=sdc, parms=c(beta=0))
fp(0, times=times, func=sdc, parms=c(beta=0))
fp(0.1, times=times, func=sdc, parms=c(beta=0))
fp(-0.1, times=times, func=sdc, parms=c(beta=0))
ode(0.1, times=times, func=sdc, parms=parms)
ode(-0.1, times=times, func=sdc, parms=parms)
ode(-0.1, times=times, func=sdc, parms=c(beta=-0.1))
mm <- function(t,x, beta) { return( list (-x +beta*x/(x+1))  ) }
x=seq(0,5,by=0.01)
mm(x,beta=1)
mm(1:10,x,beta=1)
plot(1:10,mm(1:10,x,beta=1))
plot(mm(1:10,x,beta=1))
plot(mm(1:10,x,beta=1))
plot(mm(1,x,beta=1))
mm(1,x,beta=1)
mm(1,x=x,beta=1)
x
plot(x,mm(1,x=x,beta=1))
plot(x,mm(1,x,beta=1))
length(x)
length()
y=mm(1,x,beta=1)
length(y)
y
str(y)
str(x)
y[1]
y[[1]]
plot(x,y[[1]])
plot(x,mm(1,x,beta=1)[[1]])
plot(x,mm(1,x,beta=2)[[1]])
x=seq(0,1,by=0.01)
plot(x,mm(1,x,beta=2)[[1]])
plot(x,mm(1,x,beta=1)[[1]])
plot(x,mm(1,x,beta=0.1)[[1]])
plot(x,mm(1,x,beta=0.01)[[1]])
plot(x,mm(1,x,beta=0.01)[[1]],ylim=(-1,1))
plot(x,mm(1,x,beta=0.01)[[1]],ylim=c(-1,1))
points(x,mm(1,x,beta=1)[[1]])
points(x,mm(1,x,beta=2)[[1]])
points(x,mm(1,x,beta=4)[[1]])
points(x,mm(1,x,beta=1.1)[[1]])
plot(x,mm(1,x,beta=0.01)[[1]])
x=seq(0,0.1,by=0.001)
plot(x,mm(1,x,beta=0.01)[[1]])
points(x,mm(1,x,beta=1.1)[[1]],col="red")
points(x,mm(1,x,beta=0.9)[[1]],col="blue")
mm <- function(t,x, beta) { return( list (-x +beta*x^2/(x^2+1))  ) }
plot(x,mm(1,x,beta=0.95)[[1]])
points(x,mm(1,x,beta=1.1)[[1]],col="blue")
x=seq(0,1,by=0.01)
plot(x,mm(1,x,beta=0.95)[[1]])
points(x,mm(1,x,beta=1.1)[[1]],col="blue")
points(x,mm(1,x,beta=2)[[1]],col="blue")
points(x,mm(1,x,beta=3)[[1]],col="red")
mat <- cbind(Uni05 = (1:100)/21, Norm = rnorm(100),
`5T` = rt(100, df = 5), Gam2 = rgamma(100, shape = 2))
mat
boxplot(as.data.frame(mat),
main = "boxplot(as.data.frame(mat), main = ...)")
boxplot(as.data.frame(mat))
boxplot(as.data.frame(mat))
library(lattice)
paint<-c("blue", "black", "red", "blue", "black", "red", "blue", "black", "red")
car1<-c(100, 138, 123, 143, 112, 144, 343, 112, 334)
car2<-c(111, 238, 323, 541, 328, 363, 411, 238, 313)
car3<-c(432, 123, 322, 342, 323, 522, 334, 311, 452)
data<-data.frame(paint, car1, car2, car3)
data
boxplot(data)
boxplot(data, paint)
split(data[,2:4],data[,1])
temp = reshape(data, direction="long", varying=2:4, sep="")
temp
boxplot(temp)
boxplot(car ~ paint, data=temp)
bwplot(car1+car2+car3 ~ paint, data=data)
bwplot(car1+car2+car3 ~ paint, data=temp)
bwplot(car1+car2+car3 ~ paint, data=data)
bwplot(car ~ paint, data=data)
bwplot(car ~ paint | paste0("Car ", time), data=data)
bwplot(car ~ paint | paste0("Car ", time), data=temp)
bwplot(car ~ paint, data=temp)
bwplot(car ~ paint | paste0("Husky ", time), data=temp)
bwplot(car ~ paint | paste0("Husky "), data=temp)
bwplot(car ~ paint | paste0("Husky ", time), data=temp)
bwplot(car ~ paint | colnames(data), data=temp)
bwplot(car ~ paint | colnames(data[2:4]), data=temp)
bwplot(car ~ paint | paste0("Husky ", time), data=temp)
bwplot(car ~ paint | paste0(colnames(data), time), data=temp)
bwplot(car ~ paint | paste0(colnames(data), time), data=data)
bwplot(car ~ paint | paste0("A", time), data=temp)
bwplot(cyl.f~mpg|gear.f,
ylab="Cylinders", xlab="Miles per Gallon",
main="Mileage by Cylinders and Gears",
layout=(c(1,3))
bwplot(cyl.f~mpg|gear.f,
ylab="Cylinders", xlab="Miles per Gallon",
main="Mileage by Cylinders and Gears",
layout=(c(1,3))
attach(mtcars)
bwplot(cyl.f~mpg|gear.f,
ylab="Cylinders", xlab="Miles per Gallon",
main="Mileage by Cylinders and Gears",
layout=(c(1,3))
bwplot(cyl.f~mpg|gear.f)
gear.f<-factor(gear,levels=c(3,4,5),
labels=c("3gears","4gears","5gears"))
cyl.f <-factor(cyl,levels=c(4,6,8),
labels=c("4cyl","6cyl","8cyl"))
bwplot(cyl.f~mpg|gear.f,
ylab="Cylinders", xlab="Miles per Gallon",
main="Mileage by Cylinders and Gears",
layout=(c(1,3))
)
gear.f
cycl.f
cyc.f
cyl.f
length(cyl.f_
length(cyl.f)
length(cyl.f)
length(gear.f)
length(mpg)
bwplot(cyl.f~mpg|gear.f,
ylab="Cylinders", xlab="Miles per Gallon",
main="Mileage by Cylinders and Gears")
bwplot(cyl.f~mpg|gear.f)
mtcars
head(mtcars)
str(mtcars)
bwplot(cyl~mpg|gear)
bwplot(cyl~mpg|as.factor(gear)
)
bwplot(cyl~mpg*disp|as.factor(gear))
bwplot(cyl~as.factro(mpg)*as.factor(disp)|as.factor(gear))
bwplot(cyl~as.factor(mpg)*as.factor(disp)|as.factor(gear))
bwplot(~mpg|as.factor(gear))
bwplot(~mpg|cyl.f)
densityplot(~mpg|cyl.f)
densityplot(cyl~mpg|cyl.f)
densityplot(cyl~mpg)
densityplot(cyl~mpg| cyl)
densityplot(cyl~mpg| cyl.f)
densityplot(cyl~mpg| as.factor(cyl)
)
ToothGrowth
head(ToothGrowth)
boxplot(len~supp)
boxplot(len~supp,data=ToothGrowth)
boxplot(c(len,dose)~supp,data=ToothGrowth)
boxplot(~supp,data=ToothGrowth)
boxplot(~supp,data=ToothGrowth)
x1=1:100                          # vector
eps=rnorm(n=100, mean=-0.5, sd=5) # noise
x2 = x1 + eps
smoothScatter(x1,x2)
qnorm(.95)
xval <- seq(-3.2, 3.2, length = 1000)
yval<- dnorm(xval)
plot(xval, yval, type = "l", axes = TRUE, frame = FALSE, lwd = 3, xlab = "", ylab = "")
x <- seq(qnorm(.95), 3.2, length = 100)
polygon(c(x, rev(x)),c(dnorm(x), rep(0, length(x))), col = "salmon")
text(mean(x), mean(dnorm(x))+.02, "5%", cex = 2)
text(qnorm(.95), .01, "1.645", cex = 2)
smoothScatter(x1,x2)
plot(xval, yval, type = "l", axes = TRUE, frame = FALSE, lwd = 3, xlab = "", ylab = "")
x <- seq(qnorm(.95), 3.2, length = 100)
x
rev(x)
c(x, rev(x))
c(dnorm(x), rep(0, length(x)))
?polygon
plot(c(1, 9), 1:2, type = "n")
polygon(1:9, c(2,1,2,1,NA,2,1,2,1),
col = c("red", "blue"),
border = c("green", "yellow"),
lwd = 3, lty = c("dashed", "solid"))
x <- seq(qnorm(.95), 3.2, length = 100)
plot(xval, yval, type = "l", axes = TRUE, frame = FALSE, lwd = 3, xlab = "", ylab = "")
polygon(x,dnorm(x), col = "salmon")
x
rev(x)
x
n <- 100
xx <- c(0:n, n:0)
yy <- c(c(0, cumsum(stats::rnorm(n))), rev(c(0, cumsum(stats::rnorm(n)))))
plot   (xx, yy, type = "n", xlab = "Time", ylab = "Distance")
polygon(xx, yy, col = "gray", border = "red")
title("Distance Between Brownian Motions")
?matrix
??matrix
1+exp(-i*pi)
1+exp(-1i*pi)
1i
sqrt(-1)
sqrt(-1 + 0i)
x<-3
x
x< -3
3=x
install.packages("readr")
install.packages("tidyr")
install.packages("dplyr")
blah = locale("en", decimal_mark=",") # stupid commas
d = read_csv("../data/foodIntake.csv", skip=1, locale=blah)
library("readr")
library("tidyr")
library("dplyr", warn.conflicts = FALSE)
blah = locale("en", decimal_mark=",") # stupid commas
d = read_csv("../data/foodIntake.csv", skip=1, locale=blah)
setwd("~/tmp/Rintro")
library("readr")
library("tidyr")
library("dplyr", warn.conflicts = FALSE)
blah = locale("en", decimal_mark=",") # stupid commas
d = read_csv("../data/foodIntake.csv", skip=1, locale=blah)
setwd("~/tmp/Rintro/rmd")
library("readr")
library("tidyr")
library("dplyr", warn.conflicts = FALSE)
blah = locale("en", decimal_mark=",") # stupid commas
d = read_csv("../data/foodIntake.csv", skip=1, locale=blah)
head(d)
str(d)
colnames(d)[c(1,20)] = c("Week", "Skip")
str(d)
head(d)
d2 = d %>% select(-Skip) %>% gather(Cage, Value, -Week)
str(d2)
d2$Group = c(rep(rep("Control", 33), 18), rep(rep("Treatment", 33), 17))
d2 = d %>% select(-Skip) %>% gather(Cage, Value, -Week)
d2$Group = c(rep(rep("Control", 33), 18), rep(rep("Treatment", 33), 17))
head(d2)
d2 %>% select(Cage, Group) %>% head()
